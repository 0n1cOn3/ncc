stages:
  - prepare
  - build
  - package
  - release
  - docker-build

variables:
  PACKAGE_PATH: "build/build.tar.gz"

.before_script_template: &before_script_definition
  before_script:
    - apt update -yqq
    - apt install git libpq-dev libzip-dev zip make wget gnupg -yqq
    - wget -O phive.phar https://phar.io/releases/phive.phar
    - wget -O phive.phar.asc https://phar.io/releases/phive.phar.asc
    - gpg --keyserver hkps://keys.openpgp.org --recv-keys 0x9D8A98B29B2D5D79
    - gpg --verify phive.phar.asc phive.phar
    - chmod +x phive.phar
    - mv phive.phar /usr/local/bin/phive
    - phive install phpab --global --trust-gpg-keys 0x2A8299CE842DD38C

prepare:
  image: php:8.1
  stage: prepare
  <<: *before_script_definition
  script:
    - echo "Preparation completed"
  rules:
    - if: $CI_COMMIT_BRANCH

build:
  image: php:8.1
  stage: build
  <<: *before_script_definition
  script:
    - make tar

package:
  image: php:8.1
  stage: package
  <<: *before_script_definition
  script:
    - make tar
    - mkdir -p package/$CI_COMMIT_REF_NAME
    - cp $PACKAGE_PATH package/$CI_COMMIT_REF_NAME/
  artifacts:
    paths:
      - package/$CI_COMMIT_REF_NAME/build.tar.gz
  rules:
    - if: $CI_COMMIT_TAG

release:
  image: php:8.1
  stage: release
  <<: *before_script_definition
  script:
    - make tar
    - mkdir ncc_$CI_COMMIT_TAG
    - cp -r build/src/* ncc_$CI_COMMIT_TAG/
  artifacts:
    paths:
      - ncc_$CI_COMMIT_TAG/
  rules:
    - if: $CI_COMMIT_TAG

ncc-docker:
  image: docker:latest
  stage: docker-build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH == 'master' || $CI_COMMIT_BRANCH == 'dev'
      exists:
        - Dockerfile

ncc-docker-debian:
  image: docker:latest
  stage: docker-build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -f Dockerfile.debian --pull -t "$CI_REGISTRY_IMAGE:debian" .
    - docker push "$CI_REGISTRY_IMAGE:debian"
  rules:
    - if: $CI_COMMIT_BRANCH == 'master'
      exists:
        - Dockerfile.debian
